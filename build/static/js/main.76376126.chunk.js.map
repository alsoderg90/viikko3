{"version":3,"sources":["services/notes.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","console","log","delete","newOject","put","Notification","props","message","styleClass","className","Filter","value","onChange","Person","onSubmit","name","onChangeName","number","onChangeNumber","type","Persons","persons","filter","person","toLowerCase","includes","map","key","event","List","onClick","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","newFilter","showFiltered","notificationMessage","setNotificationMessage","errorMessage","setErrorMessage","useEffect","noteService","then","response","data","target","preventDefault","concat","setTimeout","window","confirm","oldName","find","catch","error","n","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76376126.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'api/persons' /// 'http://localhost:3001/persons' <- vaihdettu tuosta\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n    return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst Delete = (id) => {\r\n    console.log(\"id is\",id)\r\n   return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst replace = (id,newOject) => {\r\n    console.log(\"id is2\",newOject,`${baseUrl}/${id}`)\r\n   return axios.put(`${baseUrl}/${id}`,newOject)\r\n}\r\n\r\nexport default {\r\n    getAll : getAll,\r\n    create : create,\r\n    Delete: Delete,\r\n    replace : replace\r\n}","import React, { useState, useEffect } from 'react'\nimport noteService from './services/notes'\nimport './index.css'\n\nconst Notification = (props) => {\nif (props.message === null){\n  return null\n}\nconsole.log(props.message,`${props.styleClass}`)\nreturn (\n  <div className={props.className}> \n  {props.message}\n  </div>\n)\n}\n\nconst Filter = (props) => (\n  <div>\n  filter shown with: <input value={props.value} \n  onChange={props.onChange}/>\n  </div>\n)\n\n\nconst Person = (props) => (\n  <form onSubmit={props.onSubmit}>\n    <div>\n    name: <input value={props.name} \n    onChange={props.onChangeName}/>\n    </div>\n    <div>\n    number <input value={props.number} \n    onChange={props.onChangeNumber}/>\n    </div>\n    <div>\n    <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\nconst Persons = (props) => {\n  const copy = props.persons.filter(person =>\n  person.name.toLowerCase().includes(props.filter.toLowerCase()))\n  return (\n    copy.map( person => <List key={person.id} id={person.id}\n             name={person.name} number={person.number} event={props.event}/> )\n  )\n}\n\nconst List = ({id,name,number,event}) => (\n  <p> {name}  {number} <button onClick={() => event(id) } > Delete     </button></p>\n)\n\nconst App = () => {\n\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, showFiltered ] = useState('')\n  const [ notificationMessage, setNotificationMessage] = useState(null)\n  const [ errorMessage, setErrorMessage] = useState(null)\n\n  const deleteName = (id) => {\n    const person = persons.find(person => person.id === id)\n    if (window.confirm(\"poistetaanko henkilÃ¶\")) {\n      noteService.Delete(id).then(response => {\n        setPersons(persons.filter(person => person.id !==id))\n      })\n      setNotificationMessage(`Contact ${person.name} deleted`)\n      setTimeout(() => {          \n        setNotificationMessage(null)        \n        }, 1500)\n    }\n  }\n\n  const addName = (event) => {\n    event.preventDefault()\n    const person = {\n      name: newName,\n      number: newNumber\n    }\n    if (persons.map(person => person.name.toLowerCase()).includes(newName.toLowerCase()) === false) {\n      noteService.create(person).then(response => {\n        setPersons(persons.concat(response.data))\n        setNewName('')\n        setNewNumber('')\n        setNotificationMessage(`Added ${person.name}`)\n        setTimeout(() => {          \n          setNotificationMessage(null)        \n          }, 1500)\n\n    }) \n    } \n    else {\n      if (window.confirm(`${newName} is already added to phonebook, replace with a new one?`)) {\n        const oldName = persons.find(name => name.name.toLowerCase() === person.name.toLowerCase())\n        console.log(oldName,\"id ompi:\",oldName.id)\n        noteService.replace(oldName.id,person)\n        .then(response => {\n          setPersons(persons.map(name => name.id === oldName.id ? response.data : name ))\n          setNewName('')\n          setNewNumber('')\n          setNotificationMessage(`Replaced ${person.name}`)\n          setTimeout(() => {          \n            setNotificationMessage(null)        \n            }, 2500)\n          })\n          .catch(error => {\n            setPersons(persons.filter(n => n.id !== oldName.id))\n            setErrorMessage(      \n              `Information of '${person.name}' was already deleted from server`)      \n              setTimeout(() => {          \n                setErrorMessage(null)        \n                }, 4000)    \n              })\n            }} \n                     \n  }\n\n  useEffect(() => {\n    noteService.getAll().then(response => {\n    setPersons(response.data)\n    })\n  }, [])\n  \n   const handleNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} className=\"notification\" />\n      <Notification message={errorMessage} className=\"error\" />\n      <Filter value={newFilter} onChange={(event) => {\n      showFiltered(event.target.value)}}/>\n      <h2>add a new</h2>\n      <Person onSubmit={addName} name={newName}\n      onChangeName={(event) => {setNewName(event.target.value)}}\n      number={newNumber} onChangeNumber={handleNumber}/>\n      <h2>Numbers</h2>\n      <Persons persons={persons} filter={newFilter} event={deleteName}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}